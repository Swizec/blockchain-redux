{"version":3,"file":"blockchain-redux.umd.js","sources":["../src/Block.js","../src/blockchainRedux.js","../src/firebaseMiddleware.js"],"sourcesContent":["import CryptoJS from \"crypto-js\";\n\nclass Block {\n    constructor({ previousBlock, data }) {\n        this.index = previousBlock.index + 1;\n        this.previousHash = previousBlock.hash.toString();\n        this.timestamp = new Date().getTime() / 1000;\n        this.data = data;\n\n        this.hash = Block.calculateHash(this);\n    }\n\n    set data(data) {\n        this._data = JSON.stringify(data);\n    }\n\n    get data() {\n        return typeof this._data !== \"undefined\"\n            ? JSON.parse(this._data)\n            : undefined;\n    }\n\n    // this is where a Proof-of-Work or Proof-of-Stake algo comes in, I think\n    static calculateHash(block) {\n        return CryptoJS.SHA256(\n            block.index + block.previousHash + block.timestamp + block._data\n        ).toString();\n    }\n}\n\nexport default Block;\n","import Block from \"./Block\";\n\nfunction createStore(reducer, preloadedState, enhancer) {\n    if (\n        typeof preloadedState === \"function\" &&\n        typeof enhancer === \"undefined\"\n    ) {\n        enhancer = preloadedState;\n        preloadedState = undefined;\n    }\n\n    if (typeof enhancer === \"function\") {\n        return enhancer(createStore)(reducer, preloadedState);\n    }\n\n    let blockchain = [\n        new Block({\n            previousBlock: {\n                index: 0,\n                hash: \"0\",\n                data: {},\n                timestamp: new Date().getTime()\n            },\n            data: preloadedState\n        })\n    ];\n    let listeners = [];\n\n    function notifyListeners() {\n        listeners.forEach(listener => listener());\n    }\n\n    function getLastBlock() {\n        return blockchain[blockchain.length - 1];\n    }\n\n    function dispatch(action) {\n        const lastBlock = getLastBlock();\n        const nextData = reducer(lastBlock.data, action);\n\n        addBlock(new Block({ previousBlock: lastBlock, data: nextData }));\n    }\n\n    function subscribe(listener) {\n        listeners.push(listener);\n\n        return function unsubscribe() {\n            listeners.splice(listeners.indexOf(listener), 1);\n        };\n    }\n\n    function addBlock(newBlock) {\n        if (isValidNewBlock(newBlock, getLastBlock())) {\n            blockchain.push(newBlock);\n            notifyListeners();\n        }\n    }\n\n    function isValidNewBlock(newBlock, previousBlock) {\n        if (previousBlock.index + 1 !== newBlock.index) {\n            console.log(\"invalid index\");\n            return false;\n        } else if (previousBlock.hash !== newBlock.previousHash) {\n            console.log(\"invalid previoushash\");\n            return false;\n        } else if (Block.calculateHash(newBlock) !== newBlock.hash) {\n            console.log(\n                \"invalid hash: \",\n                Block.calculateHash(newBlock),\n                newBlock.hash\n            );\n            return false;\n        }\n        return true;\n    }\n\n    function isValidChain(blockchain) {\n        for (let i = 0; i < blockchain.length - 1; i++) {\n            if (!isValidNewBlock(blockchain[i + 1], blockchain[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function replaceChain(newBlocks) {\n        if (isValidChain(newBlocks) && newBlocks.length > blockchain.length) {\n            console.debug(\"Replacing old chain with new\");\n            blockchain = newBlocks;\n        }\n        notifyListeners();\n    }\n\n    dispatch({ type: \"INIT\" });\n\n    return {\n        getState: () => getLastBlock().data,\n        getLastBlock: getLastBlock,\n        dispatch: dispatch,\n        subscribe: subscribe,\n\n        addBlock: addBlock,\n        replaceChain: replaceChain, // primarily used when starting up to take latest available blockchain\n        getWholeChain: () => blockchain\n    };\n}\n\nexport default createStore;\n","export default function(firebaseApp) {\n    const db = firebaseApp.database();\n\n    return createStore => (...args) => {\n        const store = createStore(...args);\n        const _dispatch = store.dispatch;\n\n        function dispatch(action) {\n            _dispatch(action);\n\n            const newBlock = store.getLastBlock();\n            return saveBlock(newBlock);\n        }\n\n        function saveBlock(block) {\n            block._data = block._data || {};\n\n            return db\n                .ref(`blockchain/${block.index}`)\n                .once(\"value\")\n                .then(snapshot => {\n                    if (!snapshot.exists()) {\n                        db.ref(`blockchain/${block.index}`).set(block);\n                        return true;\n                    } else {\n                        // collision resolution?\n                        return false;\n                    }\n                });\n        }\n\n        function listenForNextBlock() {\n            const nextIndex = store.getLastBlock().index + 1;\n            const valueHandler = function(snapshot) {\n                if (snapshot.exists()) {\n                    let block = snapshot.val();\n                    block.data = block._data ? JSON.parse(block._data) : {};\n\n                    console.log(\"Received block from outside\", block);\n\n                    // TODO: potential conflict with local last block\n                    store.addBlock(block);\n                    db\n                        .ref(`blockchain/${nextIndex}`)\n                        .off(\"value\", valueHandler);\n\n                    listenForNextBlock();\n                }\n            };\n\n            db.ref(`blockchain/${nextIndex}`).on(\"value\", valueHandler);\n            console.log(\"Listening for\", nextIndex);\n        }\n\n        function initFromFirebase() {\n            return db\n                .ref(\"blockchain\")\n                .orderByKey()\n                .once(\"value\")\n                .then(snapshot => snapshot.val())\n                .then(blockchain => {\n                    blockchain = Object.values(blockchain).map(block => {\n                        block.data = block._data ? JSON.parse(block._data) : {};\n                        return block;\n                    });\n\n                    console.debug(\"Got blockchain\", blockchain.length);\n\n                    store.replaceChain(blockchain);\n\n                    listenForNextBlock();\n\n                    return Object.assign(store, {\n                        dispatch\n                    });\n                });\n        }\n\n        return Promise.all(store.getWholeChain().map(saveBlock)).then(\n            initFromFirebase\n        );\n    };\n}\n"],"names":["let","const"],"mappings":"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"}